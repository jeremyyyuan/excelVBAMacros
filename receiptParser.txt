Sub ParseContents()
    '***IMPORTANT: CHANGE THIS TO WHATEVER FOLDER NAME HOLDS THE RECEIPTS
    'Currently, the folder is Drafts because I was testing in that folder
    Dim strTargetFolder: strTargetFolder = "Inbox"
    Dim SearchText: SearchText = "Requisition ID: "
    Dim sht As Worksheet
    Dim NS As Outlook.Namespace
    Dim outlookApp
    On Error Resume Next
    Set outlookApp = CreateObject("Outlook.Application")
    Set NS = outlookApp.GetNamespace("MAPI")
    Dim oFld As Outlook.MAPIFolder
    For ifld = 1 To NS.Folders.Count
        'Handle case sensitivity, even though it shouldn't be a problem
        For ictr = 1 To NS.Folders.Item(ifld).Folders.Count
            'If the target is found, exit the for loop
            If LCase(NS.Folders.Item(ifld).Folders(ictr).Name) = LCase(strTargetFolder) Then
              Set oFld = NS.Folders.Item(ifld).Folders(ictr)
              Exit For
            End If
         Next
    Next
    
    'Go into the "Orders" Subfolder
    Set oFld = oFld.Folders("Orders")
    
    'Set the current sheet as the active sheet object
    Set sht = ActiveSheet
    
    Dim r As Long
    'Find the last filled row in the current sheet
    r = sht.Cells.Find("*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    'Increment by one to get to the first unused row
    r = r + 1
    
    'If the destination folder exists
    If Not oFld Is Nothing Then
        'Loop through every  message in the receipt folder
        For Each outlookMessage In oFld.Items
            If TypeOf outlookMessage Is MailItem Then
                'Put the date into column 1
                Cells(r, 1) = outlookMessage.ReceivedTime
                sht.Cells(r, 1).NumberFormat = "m/d/yyyy"
                'Reset the SearchText to Requisition ID for future loops
                SearchText = "Requisition ID: "
                'Search with the first SearchText = Requisition ID
                If InStr(outlookMessage.Body, SearchText) Then
                    strMsgBody = outlookMessage.Body
                    'Parse the body of the message, put the result in strEmailContents
                    Dim splitter, parsemail: splitter = Split(strMsgBody, vbCrLf)
                    For Each splt In splitter
                        If InStr(splt, SearchText) Then
                            parsemail = splt
                            Exit For
                        End If
                    Next
                    strEmailContents = ParseTextLinePair(parsemail, SearchText)
                    'Put the parsed Requisition ID into column 2
                    Cells(r, 2) = strEmailContents
                End If
                'Change the SearchText to the Requestor
                SearchText = "Requestor: "
                'Parse the body again for Requestor
                If InStr(outlookMessage.Body, SearchText) Then
                   strMsgBody = outlookMessage.Body
                   splitter = Split(strMsgBody, vbCrLf)
                   For Each splt In splitter
                       If InStr(splt, SearchText) Then
                           parsemail = splt
                           Exit For
                       End If
                   Next
                   strEmailContents = ParseTextLinePair(parsemail, SearchText)
                   'Put the parsed Requestor into column 3
                   Cells(r, 3) = strEmailContents
                End If
                'Change the SearchText to the Vendor
                SearchText = "Vendor: "
                'Parse the body again for Vendor
                If InStr(outlookMessage.Body, SearchText) Then
                   strMsgBody = outlookMessage.Body
                   splitter = Split(strMsgBody, vbCrLf)
                   For Each splt In splitter
                       If InStr(splt, SearchText) Then
                           parsemail = splt
                           Exit For
                       End If
                   Next
                   strEmailContents = ParseTextLinePair(parsemail, SearchText)
                   'Put the parsed Vendor into column 4
                   Cells(r, 4) = strEmailContents
                End If
                'Change the SearchText to the Requisition Amount
                SearchText = "Requisition Amount: $"
                'Parse the body again for Requisition Amount
                If InStr(outlookMessage.Body, SearchText) Then
                   strMsgBody = outlookMessage.Body
                   splitter = Split(strMsgBody, vbCrLf)
                   For Each splt In splitter
                       If InStr(splt, SearchText) Then
                           parsemail = splt
                           Exit For
                       End If
                   Next
                   strEmailContents = ParseTextLinePair(parsemail, SearchText)
                   'Put the parsed Requisition Amount into column 5
                   Cells(r, 5) = strEmailContents
                   sht.Cells(r, 5).NumberFormat = "0.00"
                End If
                'Increment row by 1 to fit every single email in the folder
                r = r + 1
            End If
        Next
    End If
End Sub
Function ParseTextLinePair(strSource, strLabel)
    Dim Rturn
    If InStr(strSource, vbCrLf) Then
        Rturn = Mid(strSource, InStr(strSource, strLabel) + Len(strLabel), InStr(strSource, vbCrLf) - InStr(strSource, strLabel) + Len(strLabel)):
    Else
        Rturn = Mid(strSource, InStr(strSource, strLabel) + Len(strLabel))
    End If
ParseTextLinePair = Trim(Rturn)
End Function
